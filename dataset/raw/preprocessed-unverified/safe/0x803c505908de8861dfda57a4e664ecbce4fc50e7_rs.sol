/**

 *Submitted for verification at Etherscan.io on 2018-08-11

*/



pragma solidity ^0.4.24;



contract Token {



    /// §£§à§Ù§Ó§â§Ñ§ë§Ñ§Ö§ä §à§Ò§ë§Ö§Ö §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §ä§à§Ü§Ö§ß§à§Ó

    function totalSupply() constant returns (uint256 supply) {}



    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â§í §Ó§Ý§Ñ§Õ§Ö§Ý§î§è§Ñ. §¡§Õ§â§Ö§ã, §ã §Ü§à§ä§à§â§à§Ô§à §Ò§å§Õ§å§ä §Ú§Ù§Ó§Ý§Ö§Ü§Ñ§ä§î§ã§ñ §ä§à§Ü§Ö§ß§í.

    /// §£§à§Ù§Ó§â§Ñ§ë§Ñ§Ö§ä §ä§Ö§Ü§å§ë§Ú§Û §Ò§Ñ§Ý§Ñ§ß§ã.

    function balanceOf(address _owner) constant returns (uint256 balance) {}



    /// §µ§Ó§Ö§Õ§à§Þ§Ý§ñ§Ö§ä §à§Ò §à§ä§á§â§Ñ§Ó§Ü§Ö `_value` §ä§à§Ü§Ö§ß§à§Ó §ß§Ñ §Ñ§Õ§â§Ö§ã `_to` §Ú§Ù `msg.sender`

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _to §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ñ§Õ§â§Ö§ã §á§à§Ý§å§é§Ñ§ä§Ö§Ý§ñ

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _value §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §ä§à§Ü§Ö§ß§à§Ó, §Ü§à§ä§à§â§í§Ö §Ò§å§Õ§å§ä §à§ä§á§â§Ñ§Ó§Ý§Ö§ß§í

    /// §£§à§Ù§Ó§â§Ñ§ë§Ñ§Ö§ä §Ú§ß§æ§à§â§Þ§Ñ§è§Ú§ð, §Ò§í§Ý§Ñ §Ý§Ú §ä§â§Ñ§ß§Ù§Ñ§Ü§è§Ú§ñ §å§ã§á§Ö§ê§ß§à§Û §Ú§Ý§Ú §ß§Ö§ä

    function transfer(address _to, uint256 _value) returns (bool success) {}



    /// §µ§Ó§Ö§Õ§à§Þ§Ý§ñ§Ö§ä §à§Ò §à§ä§á§â§Ñ§Ó§Ü§Ö `_value` §ä§à§Ü§Ö§ß§à§Ó §ß§Ñ §Ñ§Õ§â§Ö§ã `_to` §Ú§Ù `_from` §á§â§Ú §å§ã§Ý§à§Ó§Ú§Ú, §é§ä§à §á§à§Õ§ä§Ó§Ö§â§Ø§Õ§Ö§ß§à `_from`

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _from §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ñ§Õ§â§Ö§ã §à§ä§á§â§Ñ§Ó§Ú§ä§Ö§Ý§ñ

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _to §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ñ§Õ§â§Ö§ã §á§à§Ý§å§é§Ñ§ä§Ö§Ý§ñ

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _value §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §ä§à§Ü§Ö§ß§à§Ó, §Ü§à§ä§à§â§í§Ö §Ò§å§Õ§å§ä §à§ä§á§â§Ñ§Ó§Ý§Ö§ß§í

    /// §£§à§Ù§Ó§â§Ñ§ë§Ñ§Ö§ä §Ú§ß§æ§à§â§Þ§Ñ§è§Ú§ð, §Ò§í§Ý§Ñ §Ý§Ú §ä§â§Ñ§ß§Ù§Ñ§Ü§è§Ú§ñ §å§ã§á§Ö§ê§ß§à§Û §Ú§Ý§Ú §ß§Ö§ä

    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}



    /// §µ§Ó§Ö§Õ§à§Þ§Ý§ñ§Ö§ä `msg.sender` §á§à§Õ§ä§Ó§Ö§â§Õ§Ú§ä§î `_addr` §Õ§Ý§ñ §à§ä§á§â§Ñ§Ó§Ü§Ú `_value` §ä§à§Ü§Ö§ß§à§Ó

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _spender §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ñ§Õ§â§Ö§ã §ã§é§Ö§ä§Ñ, §ã §Ü§à§ä§à§â§à§Ô§à §Þ§à§Ø§ß§à §à§ä§á§â§Ñ§Ó§Ý§ñ§ä§î §ä§à§Ü§Ö§ß§í

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _value §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §ä§à§Ü§Ö§ß§à§Ó, §Ü§à§ä§à§â§à§Ö §â§Ñ§Ù§â§Ö§ê§Ö§ß§à §à§ä§á§â§Ñ§Ó§Ú§ä§î

    /// §£§à§Ù§Ó§â§Ñ§ë§Ñ§Ö§ä §Ú§ß§æ§à§â§Þ§Ñ§è§Ú§ð, §Ò§í§Ý§Ñ §Ý§Ú §ä§â§Ñ§ß§Ù§Ñ§Ü§è§Ú§ñ §å§ã§á§Ö§ê§ß§à§Û §Ú§Ý§Ú §ß§Ö§ä

    function approve(address _spender, uint256 _value) returns (bool success) {}

    

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _owner §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ñ§Õ§â§Ö§ã §Ó§Ý§Ñ§Õ§Ö§Ý§î§è§Ñ §ä§à§Ü§Ö§ß§à§Ó

    /// §±§Ñ§â§Ñ§Þ§Ö§ä§â _spender §à§Ù§ß§Ñ§é§Ñ§Ö§ä §Ñ§Õ§â§Ö§ã §ã§é§Ö§ä§Ñ, §ã §Ü§à§ä§à§â§à§Ô§à §Þ§à§Ø§ß§à §à§ä§á§â§Ñ§Ó§Ý§ñ§ä§î §ä§à§Ü§Ö§ß§í

    /// §£§à§Ù§Ó§â§Ñ§ë§Ñ§Ö§ä §Ú§ß§æ§à§â§Þ§Ñ§è§Ú§ð §à§Ò §à§ã§ä§Ñ§Ó§ê§Ö§Þ§ã§ñ §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§Ö §ä§à§Ü§Ö§ß§à§Ó, §Ü§à§ä§à§â§à§Ö §Þ§à§Ø§ß§à §á§à§ä§â§Ñ§ä§Ú§ä§î

    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}

    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

}



contract StandardToken is Token {

    function transfer(address _to, uint256 _value) returns (bool success) {



        //§±§à §å§Þ§à§Ý§é§Ñ§ß§Ú§ð §á§â§Ö§Õ§á§à§Ý§Ñ§Ô§Ñ§Ö§ä§ã§ñ, §é§ä§à totalSupply §ß§Ö §Þ§à§Ø§Ö§ä §Ò§í§ä§î §Ò§à§Ý§î§ê§Ö (2^256 - 1).

        //§¦§ã§Ý§Ú §ä§à§Ü§Ö§ß §ß§Ö §ã§à§Õ§Ö§â§Ø§Ú§ä totalSupply §Ú §Þ§à§Ø§ß§à §ß§Ö§à§Ô§â§Ñ§ß§Ú§é§Ö§ß§ß§à §Ó§í§á§å§ã§Ü§Ñ§ä§î §ä§à§Ü§Ö§ß§í, §ß§Ö§à§Ò§ç§à§Õ§Ú§Þ§à §ã§Ý§Ö§Õ§Ú§ä§î §Ù§Ñ §á§Ö§â§Ö§Ü§à§ß§Ó§Ö§â§ä§Ñ§è§Ú§Ö§Û §ä§à§Ü§Ö§ß§Ñ.

        //§©§Ñ§Þ§Ö§ß§Ú§ä§Ö §à§á§Ö§â§Ñ§ä§à§â if §ß§Ñ this one.

        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {

        

                if (balances[msg.sender] >= _value && _value > 0) {

            balances[msg.sender] -= _value;

            balances[_to] += _value;

            Transfer(msg.sender, _to, _value);

            return true;

        } else { return false; }

    }



    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {

        //§¬§Ñ§Ü §Ú §å§Ü§Ñ§Ù§Ñ§ß§à §ã§Ó§í§ê§Ö, §Ù§Ñ§Þ§Ö§ß§Ú§ä§Ö §ï§ä§å §ã§ä§â§à§Ü§å §ß§Ú§Ø§Ö§ß§Ñ§á§Ú§ã§Ñ§ß§ß§à§Û, §Ö§ã§Ý§Ú §Ø§Ö§Ý§Ñ§Ö§ä§Ö §Ù§Ñ§ë§Ú§ä§Ú§ä§î §Ü§à§ß§ä§â§Ñ§Ü§ä §à§ä §á§Ö§â§Ö§Ü§à§ß§Ó§Ö§â§ä§Ú§â§à§Ó§Ñ§ß§ß§í§ç §ä§à§Ü§Ö§ß§à§Ó.  

        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {

        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {

            balances[_to] += _value;

            balances[_from] -= _value;

            allowed[_from][msg.sender] -= _value;

            Transfer(_from, _to, _value);

            return true;

        } else { return false; }

    }



    function balanceOf(address _owner) constant returns (uint256 balance) {

        return balances[_owner];

    }



    function approve(address _spender, uint256 _value) returns (bool success) {

        allowed[msg.sender][_spender] = _value;

        Approval(msg.sender, _spender, _value);

        return true;

    }



    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {

      return allowed[_owner][_spender];

    }



    mapping (address => uint256) balances;

    mapping (address => mapping (address => uint256)) allowed;

    uint256 public totalSupply;

}



contract RussianCash is StandardToken { // §±§°§¥§­§¦§¨§ª§´ §ª§©§®§¦§¯§¦§¯§ª§À. §°§Ò§ß§à§Ó§Ú§ä§î §ß§Ñ§Ù§Ó§Ñ§ß§Ú§Ö §Ü§à§ß§ä§â§Ñ§Ü§ä§Ñ.



    /* §±§å§Ò§Ý§Ú§é§ß§í§Ö §á§Ö§â§Ö§Þ§Ö§ß§ß§í§Ö §ä§à§Ü§Ö§ß§Ñ */



    /*

    §£§¯§ª§®§¡§¯§ª§¦:

    §¯§Ú§Ø§Ö§Ú§Ù§Ý§à§Ø§Ö§ß§ß§í§Ö §á§Ö§â§Ö§Þ§Ö§ß§ß§í§Ö §°§±§¸§ª§°§¯§¡§­§¾§¯§½. §¯§Ö§ä §ã§ä§â§à§Ô§à§Û §ß§Ö§à§Ò§ç§à§Õ§Ú§Þ§à§ã§ä§Ú §Ú§ç §Ó§Ü§Ý§ð§é§Ñ§ä§î.

    

      §°§ß§Ú §á§à§Ù§Ó§à§Ý§ñ§ð§ä §Ü§Ñ§ã§ä§à§Þ§Ú§Ù§Ú§â§à§Ó§Ñ§ä§î §Ü§à§ß§ä§â§Ñ§Ü§ä §ä§à§Ü§Ö§ß§Ñ §Ú §ß§Ö §Ó§Ý§Ú§ñ§ð§ä §ß§Ñ §à§ã§ß§à§Ó§ß§í§Ö §æ§å§ß§Ü§è§Ú§Ú.

    §¯§Ö§Ü§à§ä§à§â§í§Ö §è§Ú§æ§â§à§Ó§í§Ö-§Ü§à§ê§Ö§Ý§î§Ü§Ú/§Ú§ß§ä§Ö§â§æ§Ö§Û§ã§í §Þ§à§Ô§å§ä §ß§Ö §á§à§Õ§Õ§Ö§â§Ø§Ú§Ó§Ñ§ä§î §ï§ä§Ú §æ§å§ß§Ü§è§Ú§Ú.

    */

    string public name;                   // §¯§Ñ§Ù§Ó§Ñ§ß§Ú§Ö §ä§à§Ü§Ö§ß§Ñ

    uint8 public decimals;                // §¬§Ñ§Ü §Þ§ß§à§Ô§à §á§à§Ü§Ñ§Ù§í§Ó§Ñ§ä§î §Õ§Ö§ã§ñ§ä§Ú§é§ß§í§ç. §±§à §å§Þ§à§Ý§é§Ñ§ß§Ú§Ö §å§ã§ä§Ñ§ß§Ñ§Ó§Ý§Ú§Ó§Ñ§Ö§ä §Ù§ß§Ñ§é§Ö§ß§Ú§Ö, §â§Ñ§Ó§ß§à§Ö 18

    string public symbol;                 // §ª§Õ§Ö§ß§ä§Ú§æ§Ú§Ü§Ñ§ä§à§â: §ß§Ñ§á§â§Ú§Þ§Ö§â SBX, XPR §Ú §ä.§Õ...

    string public version = 'H1.0'; 

    uint256 public unitsOneEthCanBuy;     // §¬§Ñ§Ü §Þ§ß§à§Ô§à §Ö§Õ§Ú§ß§Ú§è §Ó§Ñ§ê§Ö§Ô§à §ä§à§Ü§Ö§ß§Ñ §Þ§à§Ø§ß§à §Ü§å§á§Ú§ä§î §Ù§Ñ 1 ETH?

    uint256 public totalEthInWei;         // WEI §â§Ñ§Ó§ß§ñ§Ö§ä§ã§ñ §Þ§Ú§ß§Ú§Þ§Ñ§Ý§î§ß§à§Þ§å §Ù§ß§Ñ§é§Ö§ß§Ú§ð ETH (§ï§Ü§Ó§Ú§Ó§Ñ§Ý§Ö§ß§ä§ß§à §è§Ö§ß§ä§å §Ó USD §Ú§Ý§Ú §ã§Ñ§ä§à§ê§Ú §Ó BTC). §©§Õ§Ö§ã§î §Þ§í §Ò§å§Õ§Ö§Þ §ç§â§Ñ§ß§Ú§ä§î §Ó§ã§Ö §á§â§Ú§Ó§Ý§Ö§é§Ö§ß§ß§í§Ö ETH §é§Ö§â§Ö§Ù ICO

    address public fundsWallet;           // §¬§å§Õ§Ñ §Õ§à§Ý§Ø§ß§í §á§Ö§â§Ö§ß§Ñ§á§â§Ñ§Ó§Ý§ñ§ä§î§ã§ñ §á§â§Ú§Ó§Ý§Ö§é§Ö§ß§ß§í§Ö ETH?



    // §¿§ä§à §Ü§à§ß§ã§ä§â§å§Ü§ä§à§â-§æ§å§ß§Ü§è§Ú§ñ, §Ö§Ö §Ú§Þ§ñ §Õ§à§Ý§Ø§ß§à §ã§à§à§ä§Ó§Ö§ä§ã§ä§Ó§à§Ó§Ñ§ä§î §Ó§í§ê§Ö§ß§Ñ§á§Ú§ã§Ñ§ß§ß§à§Þ§å §ß§Ñ§Ù§Ó§Ñ§ß§Ú§ð

    function RussianCash() {

        balances[msg.sender] = 1000000000000000000000000000;               // §±§â§Ö§Õ§à§ã§ä§Ñ§Ó§Ú§ä§î §ã§à§Ù§Õ§Ñ§ä§Ö§Ý§ð §Ü§à§ß§ä§â§Ñ§Ü§ä§Ñ §Ó§ã§Ö §ß§Ñ§é§Ñ§Ý§î§ß§í§Ö §ä§à§Ü§Ö§ß§í. §£ §ß§Ñ§ê§Ö§Þ §ã§Ý§å§é§Ñ§Ö §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §â§Ñ§Ó§ß§à 1000000000. §¦§ã§Ý§Ú §Ó§í §ç§à§ä§Ú§ä§Ö, §é§ä§à§Ò§í §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §â§Ñ§Ó§ß§ñ§Ý§à§ã§î §é§Ú§ã§Ý§à X, §Ñ §Õ§Ö§ã§ñ§ä§Ú§é§ß§í§Ö §â§Ñ§Ó§ß§ñ§Ý§Ú§ã§î 5, §å§ã§ä§Ñ§ß§à§Ó§Ú§ä§Ö §ã§Ý§Ö§Õ§å§ð§ë§Ö§Ö §Ù§ß§Ñ§é§Ö§ß§Ú§Ö X * 100000. (§±§°§¥§­§¦§¨§ª§´ §ª§©§®§¦§¯§¦§¯§ª§À)

        totalSupply = 1000000000000000000000000000;                        // §°§Ò§ß§à§Ó§Ú§ä§î §à§Ò§ë§Ú§Û §Ó§í§á§å§ã§Ü (1000000000 §Õ§Ý§ñ §á§â§Ú§Þ§Ö§â§Ñ) (§±§°§¥§­§¦§¨§ª§´ §ª§©§®§¦§¯§¦§¯§ª§À)

        name = "Russian Cash";                                   // §µ§ã§ä§Ñ§ß§à§Ó§Ú§ä§î §ß§Ñ§Ù§Ó§Ñ§ß§Ú§Ö §ä§à§Ü§Ö§ß§Ñ §Õ§Ý§ñ §à§ä§à§Ò§â§Ñ§Ø§Ö§ß§Ú§ñ §ß§Ñ §Õ§Ú§ã§á§Ý§Ö§Ö (§±§°§¥§­§¦§¨§ª§´ §ª§©§®§¦§¯§¦§¯§ª§À)

        decimals = 18;                                               // §¬§à§Ý§Ú§é§Ö§ã§ä§Ó§à §Õ§Ö§ã§ñ§ä§Ú§é§ß§í§ç §Ù§ß§Ñ§Ü§à§Ó §á§à§ã§Ý§Ö §Ù§Ñ§á§ñ§ä§à§Û §Õ§Ý§ñ §à§ä§à§Ò§â§Ñ§Ø§Ö§ß§Ú§ñ §ß§Ñ §Õ§Ú§ã§á§Ý§Ö§Ö (§±§°§¥§­§¦§¨§ª§´ §ª§©§®§¦§¯§¦§¯§ª§À)

        symbol = "RUS";                                             // §ª§Õ§Ö§ß§ä§Ú§æ§Ú§Ü§Ñ§ä§à§â §ä§à§Ü§Ö§ß§Ñ §Õ§Ý§ñ §à§ä§à§Ò§â§Ñ§Ø§Ö§ß§Ú§ñ §ß§Ñ §Õ§Ú§ã§á§Ý§Ö§Ö (§±§°§¥§­§¦§¨§ª§´ §ª§©§®§¦§¯§¦§¯§ª§À)

        unitsOneEthCanBuy = 2500;                                      // §µ§ã§ä§Ñ§ß§à§Ó§Ú§ä§î §è§Ö§ß§å §Ù§Ñ §Ö§Õ§Ú§ß§Ú§è§å §Ó§Ñ§ê§Ö§Ô§à §ä§à§Ü§Ö§ß§Ñ §Õ§Ý§ñ ICO (§±§°§¥§­§¦§¨§ª§´ §ª§©§®§¦§¯§¦§¯§ª§À)

        fundsWallet = msg.sender;                                    // §£§Ý§Ñ§Õ§Ö§Ý§Ö§è §Ü§à§ß§ä§â§Ñ§Ü§ä§Ñ §á§à§Ý§å§é§Ñ§Ö§ä ETH

    }



    function() payable{

        totalEthInWei = totalEthInWei + msg.value;

        uint256 amount = msg.value * unitsOneEthCanBuy;

        require(balances[fundsWallet] >= amount);



        balances[fundsWallet] = balances[fundsWallet] - amount;

        balances[msg.sender] = balances[msg.sender] + amount;



        Transfer(fundsWallet, msg.sender, amount); // §±§Ö§â§Ö§Õ§Ñ§ä§î §ã§à§à§Ò§ë§Ö§ß§Ú§Ö §Ò§Ý§à§Ü§é§Ö§Û§ß-§ã§Ö§ä§Ú



        //§°§ä§á§â§Ñ§Ó§Ú§ä§î Ether §Ó fundsWallet

        fundsWallet.transfer(msg.value);                               

    }



    /* §£§Ö§â§Ú§æ§Ú§Ü§Ñ§è§Ú§ñ §Ú §Ù§Ñ§ä§Ö§Þ §Ó§í§Ù§à§Ó §Ü§à§ß§ä§â§Ñ§Ü§ä§Ñ */

    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {

        allowed[msg.sender][_spender] = _value;

       Approval(msg.sender, _spender, _value);



        //§Ó§í§Ù§à§Ó §æ§å§ß§Ü§è§Ú§Ú receiveApproval §Ó §Ü§à§ß§ä§â§Ñ§Ü§ä§Ö, §Ü§à§ä§à§â§í§Û §Ó§í §ç§à§ä§Ú§ä§Ö §å§Ó§Ö§Õ§à§Þ§Ú§ä§î. §¿§ä§à§ä §á§â§à§è§Ö§ã§ã §á§à §å§Þ§à§Ý§é§Ñ§ß§Ú§ð §ã§à§Ù§Õ§Ñ§Ö§ä §á§à§Õ§á§Ú§ã§î §æ§å§ß§Ü§è§Ú§Ú, §ß§à §Ó §ß§Ñ§ê§Ö§Þ §ã§Ý§å§é§Ñ§Ö §ï§ä§à §ß§Ö §ß§å§Ø§ß§à §Ó§Ü§Ý§ð§é§Ñ§ä§î §Ó §Ü§à§ß§ä§â§Ñ§Ü§ä.

        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)

        //§Ü §ï§ä§à§Þ§å §Þ§à§Þ§Ö§ß§ä§å, §Ó§í§Ù§à§Ó §Ü §æ§å§ß§Ü§è§Ú§Ú §Õ§à§Ý§Ø§Ö§ß §á§â§à§Û§ä§Ú §å§ã§á§Ö§ê§ß§à. 

        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }

        return true;

    }

}